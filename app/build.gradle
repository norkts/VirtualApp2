apply plugin: 'com.android.application'

android {
    //compileSdkVersion 29
    //buildToolsVersion '29.0.1'

    signingConfigs {
        release {
            storeFile file(rootProject.ext.signing_storeFile)
            storePassword rootProject.ext.signing_storePassword
            keyAlias = rootProject.ext.signing_keyAlias
            keyPassword rootProject.ext.signing_keyPassword
        }
        debug {
            storeFile file(rootProject.ext.signing_storeFile)
            storePassword rootProject.ext.signing_storePassword
            keyAlias = rootProject.ext.signing_keyAlias
            keyPassword rootProject.ext.signing_keyPassword
        }
    }
    defaultConfig {
        applicationId rootProject.ext.PACKAGE_NAME
        //minSdkVersion 15
        //targetSdkVersion 32
        versionCode rootProject.ext.VA_VERSION_CODE
        versionName rootProject.ext.VA_VERSION

        //renderscriptTargetApi 19
        //renderscriptSupportModeEnabled true

        multiDexEnabled true
        vectorDrawables.useSupportLibrary = true

        buildConfigField 'String', 'PACKAGE_NAME', '"' + rootProject.ext.PACKAGE_NAME + '"'
        buildConfigField 'String', 'EXT_PACKAGE_NAME', '"' + rootProject.ext.EXT_PACKAGE_NAME + '"'
        buildConfigField 'String', 'VA_VERSION_NAME', '"V' + rootProject.ext.VA_VERSION + '"'
        //buildConfigField 'String', 'PACKAGE_NAME_ARM64', '"' + rootProject.ext.EXT_PACKAGE_NAME + '"'
        manifestPlaceholders = [
                PACKAGE_NAME_32BIT: rootProject.ext.PACKAGE_NAME,
                PACKAGE_NAME_ARM64: rootProject.ext.EXT_PACKAGE_NAME,
                VA_ACCESS_PERMISSION_NAME: rootProject.ext.VA_ACCESS_PERMISSION_NAME,
        ]
        //ndk {
            //abiFilters rootProject.ext.VA_VERSION_64?"arm64-v8a":"armeabi-v7a"//"arm64-v8a","armeabi", "armeabi-v7a", "x86"  //兼容Android 10
            //abiFilters "armeabi-v7a", "x86" , "x86_64"
        //}

        if (rootProject.ext.VA_MAIN_PACKAGE_32BIT) {
            ndk.abiFilters = ["armeabi-v7a"]
        } else {
            ndk.abiFilters = ["arm64-v8a"]
        }
        signingConfig signingConfigs.release
    }
    sourceSets {
        main {
            jniLibs.srcDirs = ['libs']
        }
    }

    buildTypes {
        debug {
            //debuggable true
            jniDebuggable false
            minifyEnabled false
            zipAlignEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), '../security/proguard-rules.pro' //'proguard-rules.pro', 'virtualapp-proguard-rules.pro','../security/proguard-rules.pro' //
        }
        release {
            jniDebuggable true
            minifyEnabled true
            zipAlignEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), '../security/proguard-rules.pro' //'proguard-rules.pro', 'virtualapp-proguard-rules.pro','../security/proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    lintOptions {
        abortOnError false  // 如果发现 lint 错误，不中止编译
        checkReleaseBuilds false  // 禁用发布版本的 lint 检查
        xmlReport true  // 生成 XML 格式的报告
        htmlReport true  // 生成 HTML 格式的报告
    }
    lintOptions {
        abortOnError false
    }
    packagingOptions {
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'

        // 解决资源冲突
       // exclude 'META-INF/metadata.jvm.kotlin_module'
        //exclude 'META-INF/*.kotlin_module' // 也可以尝试排除所有相关的kotlin_module文件
    }
}


repositories {
    flatDir {
        dirs 'sdk'
    }
}


dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
//    implementation(name:'lib-release', ext:'aar')
    implementation project(':lib')
    implementation project(':exposed-core')

    //Android Lib
    implementation 'androidx.percentlayout:percentlayout:1.0.0'
    implementation 'androidx.appcompat:appcompat:1.2.0'
    implementation 'androidx.recyclerview:recyclerview:1.1.0'
    implementation 'com.google.android.material:material:1.2.1'
    implementation 'androidx.cardview:cardview:1.0.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.2'

    //Lifecycles, LiveData, and ViewModel
    implementation 'androidx.lifecycle:lifecycle-runtime:2.2.0'
    implementation 'androidx.lifecycle:lifecycle-extensions:2.2.0'
    implementation "androidx.lifecycle:lifecycle-common-java8:2.2.0"
    //Room
    implementation 'androidx.room:room-runtime:2.2.5'
    annotationProcessor 'androidx.room:room-compiler:2.2.5'

    implementation 'io.reactivex.rxjava2:rxjava:2.2.21'
    implementation 'io.reactivex.rxjava2:rxandroid:2.1.1'

    //Retrofit
    implementation "com.squareup.retrofit2:retrofit:2.9.0"//导入Retrofit
    implementation "com.squareup.retrofit2:converter-gson:2.9.0"//转换器，请求结果转换成VO
    implementation "com.squareup.retrofit2:converter-scalars:2.9.0"//转换器，请求结果转换成原始json字符串
    implementation "com.squareup.retrofit2:adapter-rxjava2:2.9.0"//配合Rxjava使用，将retofit的call映射成Observable

    /*okhttp 网络 请求封装包*/
    implementation 'com.squareup.okhttp3:okhttp:3.4.1'
    implementation 'com.squareup.okhttp3:logging-interceptor:4.9.0'

    //google 的gson 库
    implementation 'com.google.code.gson:gson:2.8.4'

    //Promise Support
    implementation 'org.jdeferred:jdeferred-android-aar:1.2.4'

    //StringFog
    implementation 'com.github.megatronking.stringfog:xor:1.1.0'

    //fastjson
    implementation 'com.alibaba:fastjson:1.2.59'

    //Glide
    implementation 'com.github.bumptech.glide:glide:4.7.1'
    implementation files('libs/pinyin4j-2.5.0.jar')
    testImplementation 'junit:junit:4.13.2'
}
