apply plugin: 'com.android.library'


android {
    compileSdk 30
    defaultConfig {
        minSdkVersion 19
        //noinspection ExpiredTargetSdkVersion
        targetSdkVersion 22

        buildConfigField 'String', 'VA_VERSION_NAME', '"V' + rootProject.ext.VERSION + '"'
        buildConfigField 'int', 'VERSION_CODE', '' + rootProject.ext.VERSION_CODE

        if (project.hasProperty('commit')) {
            buildConfigField 'String', 'commit', '"' + commit + '"'
        } else {
            buildConfigField 'String', 'commit', '"000000"'
        }

        manifestPlaceholders = [
                PERMISSION_PREFIX:  rootProject.ext.PACKAGE_NAME_32BIT,
                AUTHORITY_PREFIX :  rootProject.ext.PACKAGE_NAME_32BIT,
                VA_VERSION       : '' + rootProject.ext.VERSION_CODE,
        ]
        externalNativeBuild {
            ndkBuild {
                abiFilters "arm64-v8a"//"armeabi-v7a"//,
            }
        }
    }
    buildTypes {
        debug {
            jniDebuggable false
        }
        release {
            minifyEnabled false
        }
    }
    sourceSets{
        main {
            jniLibs.srcDir = "src/main/libs"
        }
    }
    externalNativeBuild {
        ndkBuild {
            path file("src/main/jni/Android.mk")
        }
    }
    lintOptions {
        //IJobService need NewApi
        abortOnError false
        warning 'NewApi', 'OnClick', 'EllipsizeMaxLines'
    }
    buildToolsVersion '30.0.3'
    ndkVersion '28.0.12433566 rc1'
}
gradle.taskGraph.afterTask { task ->
    def TASK_NAME = "transformNativeLibsWithStripDebugSymbolFor"
    def COPY_ABI_LIST = [
            "lib/armeabi/",
            "lib/armeabi-v7a/",
    ]

    def COPY_FOR_HOUDINI_ABI_LIST = [
            "lib/x86/"
    ]
    if (task.name.startsWith(TASK_NAME)) {
        println("performing lib64 transforming...")
        String buildType = task.name.substring(TASK_NAME.length()).toLowerCase(Locale.US)
        File root = new File(buildDir, "intermediates/transforms/stripDebugSymbol/${buildType}")
        // 0\lib\arm64-v8a
        for (File numberDir : root.listFiles()) {
            if (!numberDir.isDirectory()) {
                continue
            }
            File soDir = new File(numberDir, "lib/arm64-v8a")
            for (File soFile : soDir.listFiles()) {
                if (soFile.name.endsWith("_64.so")) {
                    for (String abi : COPY_ABI_LIST) {
                        def toFile = new File(numberDir, abi + soFile.name)
                        GFileUtils.copyFile(soFile, toFile)
                    }
                    for (String abi : COPY_FOR_HOUDINI_ABI_LIST) {
                        def toFile = new File(numberDir, abi + soFile.name)
                        toFile.getParentFile().mkdirs()
                        toFile.createNewFile()
                    }
                    println("copy : " + soFile.path)
                }
            }
            soDir = new File(numberDir, "lib/armeabi-v7a")
            for (File soFile : soDir.listFiles()) {
                if (soFile.name.endsWith("v++.so")) {
                    def toFile = new File(numberDir, "lib/arm64-v8a/" + soFile.name)
                    GFileUtils.copyFile(soFile, toFile)
                    println("copy : " + soFile.path)
                }
            }
        }
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    compileOnly 'com.xdja.safekeyservice:xdjacrypto:1.0.3'
    compileOnly 'com.xdja.safekeyservice:jar_multi_jniapi:3.9.50'
    compileOnly 'com.xdja.safekeyservice:jar_multi_unitepin:3.9.24'
    implementation 'com.jonathanfinerty.once:once:1.3.1'

    //Android Lib
    implementation 'androidx.percentlayout:percentlayout:1.0.0'
    implementation 'androidx.appcompat:appcompat:1.2.0'
    implementation 'androidx.recyclerview:recyclerview:1.1.0'
    implementation 'com.google.android.material:material:1.2.1'
    implementation 'androidx.cardview:cardview:1.0.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.2'

    //Lifecycles, LiveData, and ViewModel
    implementation 'androidx.lifecycle:lifecycle-runtime:2.2.0'
    implementation 'androidx.lifecycle:lifecycle-extensions:2.2.0'
    implementation "androidx.lifecycle:lifecycle-common-java8:2.2.0"
    //Room
    implementation 'androidx.room:room-runtime:2.2.5'
    annotationProcessor 'androidx.room:room-compiler:2.2.5'

    implementation 'io.reactivex.rxjava2:rxjava:2.2.21'
    implementation 'io.reactivex.rxjava2:rxandroid:2.1.1'

    //Retrofit
    implementation "com.squareup.retrofit2:retrofit:2.9.0"//导入Retrofit
    implementation "com.squareup.retrofit2:converter-gson:2.9.0"//转换器，请求结果转换成VO
    implementation "com.squareup.retrofit2:converter-scalars:2.9.0"//转换器，请求结果转换成原始json字符串
    implementation "com.squareup.retrofit2:adapter-rxjava2:2.9.0"//配合Rxjava使用，将retofit的call映射成Observable

    /*okhttp 网络 请求封装包*/
    implementation 'com.squareup.okhttp3:okhttp:3.4.1'
    implementation 'com.squareup.okhttp3:logging-interceptor:4.9.0'

    //google 的gson 库
    implementation 'com.google.code.gson:gson:2.8.4'

    //Promise Support
    implementation 'org.jdeferred:jdeferred-android-aar:1.2.4'

    //StringFog
    implementation 'com.github.megatronking.stringfog:xor:1.1.0'

    //fastjson
    implementation 'com.alibaba:fastjson:1.2.59'

    //Glide
    implementation 'com.github.bumptech.glide:glide:4.7.1'

    //jsoup
    implementation 'org.jsoup:jsoup:1.18.1'
    compileOnly 'com.google.android.gms:play-services:+'
    implementation 'org.zeroturnaround:zt-zip:1.15'
    implementation 'com.sun.mail:javax.mail:1.6.2'
}
